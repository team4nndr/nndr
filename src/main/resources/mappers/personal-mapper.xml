<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="personalMapper">

	<resultMap type="MemberInfo" id="memberInfo_rm">
		<!-- DB의 기본 키(복합키면 여러 개 작성) -->
		<id property="memberNo" column="MEMBER_NO" />

		<!-- DB의 일반 컬럼들 -->
		<result property="memberEmail" column="MEMBER_EMAIL" />
		<result property="memberPw" column="MEMBER_PW" />
		<result property="memberName" column="MEMBER_NAME" />
		<result property="memberTel" column="MEMBER_TEL" />
		<result property="memberCode" column="MEMBER_CODE" />
		<result property="enrollDate" column="ENROLL_DATE" />
		<result property="disableDate" column="DISABLE_DATE" />
		<result property="deleteDate" column="DELETE_DATE" />
		<result property="setFriendReq" column="SET_FRIEND_REQ" />
		<result property="setFeedAuthority" column="SET_FEED_AUTH" />
		<result property="setAlarmFriendReq" column="SET_AL_FRIEND_REQ" />
		<result property="setAlarmReqAccept" column="SET_AL_REQ_ACCEPT" />
		<result property="setAlarmTag" column="SET_AL_TAG" />
		<result property="setAlarmReply" column="SET_AL_REPLY" />
		<result property="setAlarmLike" column="SET_AL_LIKE" />
		<result property="setAlarmShare" column="SET_AL_SHARE" />
		<result property="setAlarmFeed" column="SET_AL_FEED" />
		<result property="infoIntro" column="INFO_INTRO" />
		<result property="infoHobby" column="INFO_HOBBY" />
		<result property="infoGender" column="INFO_GENDER" />
		<result property="infoBirth" column="INFO_BIRTH" />
		<result property="infoImg" column="INFO_IMG" />
		<result property="infoJob" column="INFO_JOB" />
		<result property="infoCollege" column="INFO_COLLEGE" />
		<result property="infoHigh" column="INFO_HIGH" />
		<result property="infoMiddle" column="INFO_MIDDLE" />
		<result property="infoElementary" column="INFO_ELEMENTARY" />
		<result property="infoResidence" column="INFO_RESIDENCE" />
		<result property="infoBirthplace" column="INFO_BIRTHPLACE" />
		<result property="infoSns" column="INFO_SNS" />
		<result property="infoLang" column="INFO_LANG" />
		<result property="romanticYn" column="ROMANTIC_YN" />
		<result property="infoNick" column="INFO_NICK" />
		<result property="infoText" column="INFO_TEXT" />
		<!-- 이미지 관련 -->
		<result property="infoBack" column="INFO_BACK" />
		<result property="infoBackPath" column="INFO_BACKPATH" />
		<result property="infoProfile" column="INFO_PROFILE" />
		<result property="infoProfilePath" column="INFO_PROFILEPATH" />

		<result property="imgPath" column="IMG_PATH" />
		<result property="imgRename" column="IMG_RENAME" />
		<result property="uploadDate" column="UPLOAD_DATE" />
		<result property="boardNo" column="BOARD_NO" />
		
	</resultMap>
	<resultMap type="PersonalFriend" id="personalFriend_rm">
		<id property="friendNo" column="FRIEND_NO" />
		<result property="friendSender" column="FRIEND_SENDER" />
		<result property="friendReciver" column="FRIEND_RECIVER" />
		<result property="friendFl" column="FRIEND_FL" />
		<result property="memberNo" column="MEMBER_NO" />
		<result property="memberName" column="MEMBER_NAME" />
	</resultMap>
	
	
	<resultMap type="MemberHobby" id="memberHobby_rm">
		<id property="memberNo" column="MEMBER_NO" />
		<result property="hobbyNo" column="HOBBY_NO" />
		<result property="hobby" column="HOBBY" />
	</resultMap>
	
	<resultMap type="Board" id="board_rm">
		<!-- DB의 기본 키(복합키면 여러 개 작성) -->
		<id property="memberNo" column="MEMBER_NO" />
		<id property="boardNo" column="BOARD_NO"/>
		
		<!-- DB의 일반 컬럼들 -->
		<result property="boardText" column="BOARD_TEXT" />
		<result property="uploadDate" column="UPLOAD_DATE" />
		<result property="contentLike" column="CONTENT_LIKE" />
		<result property="delete" column="DELETE" />
		<result property="updateDate" column="UPDATE_DATE" />
		<result property="disableDate" column="DISABLE_DATE" />
		
		<!-- JOIN 컬럼들 -->
		<result property="memberName" column="MEMBER_NAME" />
		<result property="profileImage" column="INFO_IMG" />
		
		<collection property="imageList" select="selectImageList"
				column="BOARD_NO"
				javaType="java.util.ArrayList" 
				ofType="Image"/>
	
	</resultMap>
	
	<resultMap type="Image" id="image_rm">
		<id property="imgNo" column="IMG_NO"/>
		<result property="imgPath" column="IMG_PATH"/>
		<result property="imgReName" column="IMG_RENAME"/>
		<result property="imgOriginal" column="IMG_ORIGINAL"/>
		<result property="imgOrder" column="IMG_ORDER"/>
		<result property="boardNo" column="BOARD_NO"/>
	</resultMap>

	<select id="personalMember" resultMap="memberInfo_rm">
		SELECT * FROM "MEMBER" M LEFT JOIN "MEMBER_INFO" D ON (M.MEMBER_NO=D.MEMBER_NO) WHERE M.MEMBER_NO= #{no}
	</select>
	
	<update id="infoIntro">
		UPDATE "MEMBER_INFO" SET INFO_INTRO=#{infoIntro} WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<update id="infoInput">
		UPDATE "MEMBER_INFO" SET ${whatHobby} = #{hobby} WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<select id="selectHobbyList" resultMap="memberHobby_rm">
		SELECT DISTINCT(HOBBY) FROM "MEMBER_HOBBY" ORDER BY HOBBY
	</select>
	<select id="selectPerHobbyList" resultMap="memberHobby_rm">
		SELECT DISTINCT(HOBBY) FROM "MEMBER_HOBBY" WHERE MEMBER_NO =#{memberNo} ORDER BY HOBBY
	</select>
	
	

	<insert id="insertHobby" parameterType="list">
		INSERT INTO MEMBER_HOBBY (HOBBY_NO, MEMBER_NO, HOBBY)
		<foreach collection="list" item="item" separator=" UNION ALL ">
    		SELECT GET_SEQ_HOBBY_NO(), #{item.memberNo}, #{item.hobby} FROM DUAL
    	</foreach>
	</insert>

	<delete id="deleteHobby" parameterType="list">
		DELETE FROM MEMBER_HOBBY
		<where> 
		<foreach collection="list" item="item" separator=" OR ">
    		(MEMBER_NO = #{item.memberNo} AND HOBBY = #{item.hobby})
    	</foreach>
    	</where>
	</delete>
	
	
	<select id="imgSet" resultMap="memberInfo_rm">
		SELECT BOARD_NO, IMG_PATH, IMG_RENAME, UPLOAD_DATE FROM "IMAGE" LEFT JOIN "BOARD" USING(BOARD_NO) LEFT JOIN "MEMBER" USING(MEMBER_NO) WHERE MEMBER_NO = #{memberNo} AND ROWNUM<![CDATA[<]]>=3
	</select>
	
	
	<insert id="personalAdd">
		INSERT INTO FRIEND VALUES(101, ${friendSender}, ${friendReciver}, DEFAULT)
	</insert>
	
	<select id="perFriend" resultMap="personalFriend_rm">
		SELECT * FROM FRIEND WHERE (FRIEND_SENDER = ${friendSender} AND FRIEND_RECIVER=${friendReciver}) OR (FRIEND_SENDER = ${friendReciver} AND FRIEND_RECIVER=${friendSender})
	</select>
	
	<delete id="personalCan">
		DELETE FROM "FRIEND" WHERE FRIEND_SENDER=${friendSender} AND FRIEND_RECIVER=${friendReciver}
	</delete>

	<update id="backImg">
		UPDATE "MEMBER_INFO" SET INFO_BACK=#{imgRename}, INFO_BACKPATH=#{imgPath} WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<update id="delBackImg">
		UPDATE "MEMBER_INFO" SET INFO_BACK= null, INFO_BACKPATH= null WHERE MEMBER_NO = #{memberNo}
	</update>

	<update id="proImg">
		UPDATE "MEMBER_INFO" SET INFO_PROFILE=#{imgRename}, INFO_PROFILEPATH=#{imgPath} WHERE MEMBER_NO = #{memberNo}
	</update>
	
	<select id="personalfeedList" resultMap="board_rm">
		SELECT BOARD_NO, MEMBER_NAME,BOARD_TEXT,MEMBER_NO, INFO_PROFILEPATH||INFO_PROFILE INFO_IMG,
		<![CDATA[
		CASE  
			WHEN SYSDATE - UPLOAD_DATE < 1/24/60
			THEN FLOOR( (SYSDATE - UPLOAD_DATE) * 24 * 60 * 60 ) || '초 전'
			WHEN SYSDATE - UPLOAD_DATE < 1/24
			THEN FLOOR( (SYSDATE - UPLOAD_DATE) * 24 * 60) || '분 전'
			WHEN SYSDATE - UPLOAD_DATE < 1
			THEN FLOOR( (SYSDATE - UPLOAD_DATE) * 24) || '시간 전'
			ELSE TO_CHAR(UPLOAD_DATE, 'YYYY-MM-DD')
		END UPLOAD_DATE
		]]>
		FROM BOARD b 
		JOIN MEMBER USING(MEMBER_NO) JOIN "MEMBER_INFO" USING(MEMBER_NO)
		WHERE "DELETE" = 'N' AND MEMBER_NO = #{no}
		ORDER BY BOARD_NO DESC
	</select>
	
	<select id="selectImageList" resultMap="image_rm">
		SELECT * FROM "IMAGE"
		WHERE BOARD_NO=#{boardNo}
		ORDER BY IMG_ORDER DESC
	
	</select>
	
	<delete id="personalDel">
		DELETE FROM FRIEND WHERE (FRIEND_SENDER = ${friendSender} AND FRIEND_RECIVER=${friendReciver}) OR (FRIEND_SENDER = ${friendReciver} AND FRIEND_RECIVER=${friendSender})
	</delete>
	<update id="personalAccept">
		UPDATE FRIEND SET FRIEND_FL = 'Y' WHERE FRIEND_SENDER = ${friendReciver} AND FRIEND_RECIVER = ${friendSender}
	</update>
	
	
	<!--  이미지 수정 
	<update id="updateProfileImage">
		UPDATE "MEMBER_INFO" SET INFO_PROFILE = #{infoProfile} WHERE MEMBER_NO = #{memberNo}
	</update> -->
	
	
	
</mapper>
